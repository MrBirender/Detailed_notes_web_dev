Q1.what is redux?

Q2.History of state management?

Q3.pros and cons of redux?

Q4.Does redux should be chosen for every project?

Q5. what are the famous programming paradigm?

Q6. What is the use of Lodash library in functional programming?

Q7. What is currying in functional programming?

Q8. I should not mutate data in redux because it is the fundamental of redux.

Q9. What are the benefits of immutability in functional programming?

Q10. what are the famous libraries for immutability?

=> js in it self don't is pure functional programming language and it its mutalble
but we can make it immutable by using the libraries like immer, immutable.js.

=> redux is build based on functional programming paradigm and its is immutable
so , to keep its  immutability either we use immer or immutable.js like libraries or
should use spread operator.

//=> steps to inject redux in react-app
1. Design store
  a. npm i redux

=> in the following methods it seems like i am mutating the state using push.
but it is not like that in tookit imeer js in background handles the operation 
without mutating the state.

const postsSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {
       postAdded: (state, action) => {
           state.push(action.payload)
       }
    }
})


*************************************different methods of creating slice with or withour preprocessor****************************************************
### **Summary**

#### **Version 1: Simplified Reducer**
- **Use Case**: When the `action.payload` doesnâ€™t need preprocessing or custom fields.
- **Example**:
  ```javascript
  const postsSlice = createSlice({
      name: 'posts',
      initialState: [],
      reducers: {
         postAdded: (state, action) => {
             state.push(action.payload);
         }
      }
  });

  dispatch(postAdded({ id: 1, title: "My Post", content: "Post content" }));
  ```
- **Resulting Action**:
  ```json
  {
      type: "posts/postAdded",
      payload: { id: 1, title: "My Post", content: "Post content" }
  }
  ```

---

#### **Version 2: Reducer with `prepare`**
- **Use Case**: When you need to preprocess the `action.payload`, e.g., add `id` or `timestamp`.
- **Example**:
  ```javascript
  const postsSlice = createSlice({
      name: 'posts',
      initialState: [],
      reducers: {
         postAdded: {
             reducer(state, action) {
                 state.push(action.payload);
             },
             prepare(title, content) {
                 return {
                     payload: {
                         id: nanoid(),
                         title,
                         content,
                         date: new Date().toISOString(),
                     }
                 };
             }
         }
      }
  });

  dispatch(postAdded("My Post", "Post content"));
  ```
- **Resulting Action**:
  ```json
  {
      type: "posts/postAdded",
      payload: {
          id: "unique-id",
          title: "My Post",
          content: "Post content",
          date: "2025-01-28T10:00:00.000Z"
      }
  }
  ```

---

### **Key Difference**:
- **Version 1**: Directly uses `action.payload` as provided.
- **Version 2**: Prepares and customizes `action.payload` before reaching the reducer.