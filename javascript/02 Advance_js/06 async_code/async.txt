
History of Asynchronous JavaScript
        1. Early JavaScript & Synchronous Execution
        JavaScript was originally designed as a synchronous language.
        Code executes line by line, and each operation must complete before the next one starts.
        Problem: Blocking operations (like fetching data from a server) could freeze the entire browser.
        2. Callbacks (ES5 & Earlier) – The First Solution
        Callbacks were introduced to handle asynchronous tasks.
        Instead of waiting for an operation to complete, JavaScript would "call back" a function once it was done.
        Example: Handling user actions or fetching data using setTimeout() or XMLHttpRequest.
        3. Callback Hell – The Downside of Callbacks
        When multiple async operations depended on each other, nesting callbacks led to messy and unreadable code.
        Example: Fetching user data → Getting user posts → Getting comments on posts (each inside another callback).
        4. Promises (ES6, 2015) – A Better Way
        Promises solved callback hell by chaining asynchronous operations with .then() and .catch().
        Allowed better error handling and code readability.
        5. Async/Await (ES8, 2017) – Making Async Look Synchronous
        Introduced as a cleaner way to handle asynchronous operations.
        Allows writing async code that looks and behaves like synchronous code.
        Uses try-catch for error handling instead of .catch().
        6. Promise.all, Promise.race, Promise.allSettled
        Methods to handle multiple promises at once.
        Improved efficiency when dealing with multiple API calls or parallel tasks.



js in syncronous and single threaded language.
Being slow why it doesn't feel slow while working

differenc use cases of blocking and non-blocking code>?
ex: entring data to dat base or sending data to server. and giving response
 to user. that it was succesfull. and later it can have error so here blocking
 code will work better
 4:08:05 TIME STAMP
 JS ENGINE DESIGNED IN WHICH language?
 answer: c++ js is written in c++

 Q5. while programing asyncronously the methods like settimeout 
 and setinterval, setimmediate take the code out of the call stack. and then 
 it will be added to the task queue and will be executed later. and in the the cases
 of fetch it is added to the differnt queue which is higlhly prioritized queue.
 and then after time allocated it will introduce the code to the running call stack
 and then it will be executed
 Answer: yes

 Q6. is console part of core js or it is injected by the browser engine?
 Answer: it is injected by the browser engine.
 Q7. what are the things which core js contains and what are the apis it used
 to do operations?
 Answer: core js contains the basic apis to do operations.

 is js a rapper over c++?
 answer: yes