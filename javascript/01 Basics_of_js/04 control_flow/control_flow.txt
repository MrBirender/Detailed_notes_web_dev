Question. What is the control flow in JavaScript?
    Answer: 
        control flow can be broadly classified into three categories: 
        1. condition statements
        2. loop iterations and higher order fucntions.
        3. jumping statement

        => conditional statements: 
                1. if Else (it can check ranges and conditions)
                2. ternary (short hand of if else)
                3. switch case (it only checks the exact values)

       

       => loops and Hofs:
            Loops are control flow structures used to execute a block of code multiple times.

            Higher-Order Functions (HOFs) are functions that take another function as an argument or return a function.

            loops are of 5 types: 
                1. for loop
                2  for in loop
                3. for of loop
                4. while loop
                5. do while loop


            Hofs are 6 types: 
                1. forEach (doesn't return  a new array)
                        => Even though forEach is an HOF, it is grouped with loops in classification because:

                        * It performs iteration, just like loops.
                        * It is a built-in way to loop through an array.
                        * It replaces traditional loops (for, while) in many cases.

                2. map (it returns)
                3. filter (it returns)
                4. reduce
                5. some
                6. every

        So, while array-specific HOFs like map, filter, reduce, etc., work only on arrays, the concept of HOFs is not limited to arrays.
        ex: setTimeout & setInterval (Take a function as an argument)
            Event listeners (element.addEventListener)
            Promise methods (then, catch, finally)
            Functional Programming Methods (Custom HOFs like compose, pipe)



    {=> Are HOFs Slower than Regular Loops?
            Yes, in general, HOFs like forEach, map, filter are slower than traditional loops (for, while).

            Why Are HOFs Slower?
            Function Call Overhead â€“ HOFs require an extra function call for each iteration.
            Callback Execution â€“ Each element is passed through a callback, which adds overhead.
            Lack of Optimizations â€“ Traditional loops (for, while) are optimized at a lower level by JavaScript engines.
            Performance Benchmark
            For large datasets, for loops are significantly faster than HOFs like forEach and map.

            js
            Copy
            Edit
            const arr = Array(1_000_000).fill(1);

            // Using for loop (Fastest)
            console.time("for loop");
            let sum1 = 0;
            for (let i = 0; i < arr.length; i++) {
                sum1 += arr[i];
            }
            console.timeEnd("for loop");

            // Using forEach (Slower)
            console.time("forEach");
            let sum2 = 0;
            arr.forEach(num => sum2 += num);
            console.timeEnd("forEach");

            // Using reduce (Slowest)
            console.time("reduce");
            let sum3 = arr.reduce((acc, num) => acc + num, 0);
            console.timeEnd("reduce");
            Expected Results (approximate for large arrays):

            for loop: ~5ms
            forEach: ~15ms
            reduce: ~20ms
            Takeaway:

            Use loops (for, while) when performance is critical.
            Use HOFs (map, filter, reduce) for cleaner and more readable code.
            Would you like to explore more about when to use each? ðŸš€


}

       => jumping statement: 
                1. break
                2. continue
                3. return 
                4. error handling (try -catch)



Question: what are null colisens operators?
    Answer: it is an logical operator that is used to check if the left hand value is     null or undefined. if it is so then it will give the right hand value.
      note: it doesn't work for the all falsy values as or || operator does. 
       ex: console.log(null, undefined ?? 'default value');
       console.log("", 0, false: 'default value'); // "", 0, false









Question to practice this topic:
        FizzBuzz Problem: Print "Fizz" for multiples of 3, "Buzz" for multiples of 5, and "FizzBuzz" for multiples of both.
        Nested Loops with Break: Implement a matrix search that exits all loops upon finding an element.
        Asynchronous Data Fetching: Show loading, fetch data, and handle errors.

FASLY VALUES: false, 0, "", null, undefined, NaN, bigint 0n
TRUTHY VALUES: true, 1, "0", " ", [], {}, function(){} 

