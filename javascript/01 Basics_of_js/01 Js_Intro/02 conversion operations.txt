Q1. what are the conversion in js and how they behaves?
****converting to number using inbuilt convertor in js:
let score = '33';
let numberScore = Number(score);

console.log(score) // 33
console.log(numberScore) // 33 but it is number on type check:

1. "33" => 33 as in number
2. "33abc" => NaN print in console but it shows number in its type check because nan is unique number 
in js memory.
3. true  => 1, and false = 0;

*****converting to boolean:
let number = 1; if number is = {}, [], then it will give true inspite of they are empty.
let booleanNumber = Boolean(number);

console.log(number) //1
console.log(booleanNumber) // true
console.log(typeOf booleanNumber) // boolean

1. 1=> true;
2. 0=> false;
3. ""=> false;
4. "Birender"=> true;
if any data is here than it will give true otherwise it will give false:

*****converting to string :

let randomNum = 78;
let stringNum = String(randomNum);

console.log(randomNum)
console.log(stringNum) // 78 but it is string on type check

************************************ Operations  *******************************:

console.log("hello" - 5);
console.log("5a" - 3);
console.log("10" - null);
console.log(undefined + 2);
Answer:
"hello" - 5:

"hello" cannot be coerced to a number, so the result is NaN.
Output: NaN.
"5a" - 3:

"5a" cannot be fully coerced to a number, so the result is NaN.
Output: NaN.
"10" - null:

"10" is coerced to 10, and null is coerced to 0.
10 - 0 → 10.
Output: 10.
undefined + 2:

undefined cannot be coerced to a number, so the result is NaN.
Output: NaN.


predictable resutls: 
JavaScript evaluates operations left-to-right for +: ex:
console.log(1 + "2" + 2) // 122 as string

When one operand is a string, + concatenates instead of adding.ex:
console.log("1" + 2 + 2) // 122 as string

These operators ( -, *, /)coerce strings to numbers if possible:ex:
ex:
console.log("1" - 2 + 2) // 1 as number

*************************************************************************************************************
Q2. what are the difference between *prefix and postfix operator:
Here’s a concise summary:

---

### **1. Postfix Increment (`index++`)**
- **Behavior**: Uses the original value in the condition, then increments it.
- **Example**:
  ```javascript
  let index = 0;
  while (index++ < 5) {
      console.log(index); // Logs: 1, 2, 3, 4, 5
  }
  ```

### **2. Prefix Increment (`++counter`)**
- **Behavior**: Increments first, then uses the incremented value in the condition.
- **Example**:
  ```javascript
  let counter = 0;
  while (++counter <= 5) {
      console.log(counter); // Logs: 1, 2, 3, 4, 5
  }
  ```

---

### **Key Difference**:
- `index++`: Condition checks original value; logged value is incremented.
- `++counter`: Condition checks incremented value; logged value is the same.