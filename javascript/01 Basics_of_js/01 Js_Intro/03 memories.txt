Q1.what are the types of memories in js stacks and heap. which one works for primitive 
data types and for refrence data types?
Answer:
### **Types of Memory in JavaScript:**

1. **Stack:**
   - Used for **primitive data types** (`number`, `string`, `boolean`, etc.).
   - Stores data in a **Last In, First Out (LIFO)** manner.
   - Memory is fixed and managed automatically.
   - Example:
     ```javascript
     let a = 10; // Stored directly in the stack
     let b = a;  // Copy of `a` stored in a separate stack location
     b = 20;
     console.log(a); // Output: 10
     console.log(b); // Output: 20
     ```

2. **Heap:**
   - Used for **reference data types** (`object`, `array`, etc.).
   - Stores objects in dynamically allocated memory, while the STACK holds the reference (pointer) to the
    heap.
   - Example:
     ```javascript
     let obj1 = { name: "Alice" }; // Object stored in the heap
     let obj2 = obj1;              // Reference to the same heap object
     obj2.name = "Bob";
     console.log(obj1.name); // Output: Bob
     ```

---**** Primitives: Stored by value in the stack.
Non-primitives: Stored by reference in the stack, but the actual data (like objects or arrays) is stored in
the heap.
Your understanding is correct: 
primitives store the original value in the stack, while non-primitives store a reference to the data in 
the heap.
****-----


******************************************************************************************************************************
Q2. How js Executes the code?
Here's a **detailed step-by-step** breakdown of how JavaScript processes code from the moment you write it 
to its final output, including both major and minor steps:

---

### **1. Writing Code (Source Code)**:
You write JavaScript code in a file, for example:
```javascript
var globalVar = 10;

function firstFunction() {
    let firstVar = 20;
    function nestedFunction() {
        const nestedVar = 30;
        console.log(globalVar, firstVar, nestedVar);
    }
    nestedFunction();
}

firstFunction();
```

---

### **2. Parsing and Compilation**:
The JavaScript engine (like V8) reads and **parses** the source code to understand its structure. 
This phase doesn't execute any code yet; it merely prepares the code.

- **Syntax Parsing**: The code is parsed into an **Abstract Syntax Tree (AST)**, which represents the 
structure of the program.
- **Hoisting**: The JavaScript engine prepares **variable and function declarations** for execution by 
moving them to the top of their respective scopes (hoisting).

---

### **3. Memory Allocation Phase (Creation Phase)**:
The engine begins allocating memory for variables and functions.

1. **Global Execution Context (GEC)**:
   - Created to manage the global scope (the entire program).
   - **Global variables** (`var globalVar`) are hoisted and initialized to `undefined`.
   - **Function declarations** (`function firstFunction`) are hoisted with their definitions 
   (the function body).

   **Memory allocation in GEC**:
   - `globalVar: undefined`
   - `firstFunction: function definition`

2. **Inside Functions** (if any functions exist):
   - When a function is defined, its **function declaration** is hoisted with its definition, 
   but the **actual code inside the function is not executed** yet.
   - **`let` and `const` declarations** are hoisted but are **not initialized**, 
   leaving them in a **"temporal dead zone"** until the actual execution.

---

### **4. Execution Phase**:
Once the memory allocation is done, the **execution phase** begins, and the engine starts executing the code.

1. **Global Execution Context (GEC)**:
   - The **GEC** is pushed onto the **call stack** and begins executing the code.
   - The `globalVar` is assigned its actual value (`10`).
   - The `firstFunction` is found in memory, and the engine proceeds to look for function calls.

2. **Function Call (`firstFunction()`)**:
   - When `firstFunction()` is called, a **new Function Execution Context (FEC)** is created and pushed 
   onto the stack.
   - Inside `firstFunction`, `firstVar` is declared and assigned a value of `20`.
   - Then, `nestedFunction()` is called, creating another **FEC** for the nested function and pushing it 
   onto the stack.

3. **Execution of `nestedFunction()`**:
   - Inside `nestedFunction`, `nestedVar` is declared and assigned a value of `30`.
   - The `console.log` prints the following values:
     - `globalVar = 10` (from the global scope)
     - `firstVar = 20` (from `firstFunction`)
     - `nestedVar = 30` (from `nestedFunction`)

4. **Return from `nestedFunction()`**:
   - The **FEC for `nestedFunction`** is popped off the call stack after execution.

5. **Return from `firstFunction()`**:
   - The **FEC for `firstFunction`** is popped off the call stack.

6. **Global Execution Context**:
   - Execution returns to the **Global Execution Context (GEC)**, and the program completes.

---

### **Detailed Breakdown** of the **Execution Contexts**:

- **Global Execution Context (GEC)**:
  - Created first in the heap memory.
  - Manages the global scope.
  - Contains **hoisted declarations**: `globalVar` (initialized to `undefined`) and `firstFunction` 
  (with its full definition).
  - When execution starts, it is pushed onto the **call stack**.

- **Function Execution Context (FEC)** for `firstFunction()`:
  - Created when `firstFunction()` is called.
  - Contains `firstVar` (initialized to `undefined` and then set to `20`).
  - Nested function (`nestedFunction`) is declared and stored in memory.

- **Function Execution Context (FEC)** for `nestedFunction()`:
  - Created when `nestedFunction()` is called inside `firstFunction()`.
  - Contains `nestedVar` (initialized to `undefined` and then set to `30`).
  - Executes and logs the values of `globalVar`, `firstVar`, and `nestedVar`.

---

### **Summary of Key Steps**:

1. **Code Parsing**: Code is read and parsed into an Abstract Syntax Tree (AST).
2. **Memory Allocation (Hoisting)**:
   - The Global Execution Context (GEC) is created and stores references to variables and functions 
   (hoisted).
   - `var` variables are initialized to `undefined`; `let` and `const` variables are hoisted without
    initialization (temporal dead zone).
3. **Execution Phase**:
   - The GEC is pushed onto the call stack.
   - Code is executed in order, assigning actual values to variables.
   - When functions are called, new **FECs** are created and pushed onto the stack.
4. **Function Execution**:
   - Inside each function's **execution context**, variables are assigned, and code is executed.
   - When a function returns, its **FEC** is popped off the stack.
5. **Final Output**:
   - After all functions have returned and the stack is empty, the program finishes execution.

---

This is the complete **detailed process** of how JavaScript code is executed, from the writing of the
 code to its final output, including all major and minor steps. Let me know if you need further
  clarification!