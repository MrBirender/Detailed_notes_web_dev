gird is a 2 dimensional layout system that allows you to arrange elements in a grid of rows and columns.

when to use gird-column-start and gird-column-end, grid-row-start and grid-row-end => 
gird-row: 1 / 3; grid-column:2 / 5;
grid-row: span 3; grid-column: span 2;
which one is better approach?

gird-area is the shorthand: grid-area: row-start / column-start / row-end / column-end
row and column count go from first to last. and also from last to first in negative numbers:

grid-area:1 /3 / 7 / 7
grid-area: 1 /3 / -1 / -1 // both gives the same results

we can do layring with grid so easily with grid-area and z index. it replces the pain of 
positioning absolute elements with z index

if a new item i pushed in the grid container instead of the pre defined grid items, it will
can be handled using grid-auto-row and grid-auto-column and it can be also set that the new item is to be added 
in the column or row using grid-auto-flow

=> one way:
grid-template-rows: 100px, 100px, 100px;
gird-template-columns: 100px, 100px, 100px;

=> another way:
grid-template-rows: 1fr, 2fr, 1fr;
gird-template-columns: 100px, 100px:

=> another way:
grid-template-rows: 100px, 2fr, 1fr;
gird-template-columns: 1fr, 100px:

=> another way: min-max(min-content, max-content)
grid-template-rows: repeat(3, minmax(min-content, max-content));
gird-template-columns: repeat(3, minmax(min-content, max-content));

=> another way:
grid-template-rows: repeat(3, 1fr);
gird-template-columns: repeat(2, 1fr);

grid-gap: row-gap column-gap; // second one is optional if i dont provide it then row and column gap 
will be same


what is the use of gird-template-areas?
answer: it is used to define the layout of the grid in a more detailed way.
ex: grid-template-areas: "header header header" "sidebar content content" "footer footer footer"	

in the grid container and individualy we can use justify-content and align-items , justify-self and align-self


cool-trick to make items responsive in grid without media queries:
ex: grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));